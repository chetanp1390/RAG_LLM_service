{
  "name": "RAG LLM App-action",
  "type": "action",
  "valid": true,
  "status": "Available",
  "created": "2024-08-01T21:29:34.483Z",
  "updated": "2024-08-03T01:11:07.465Z",
  "language": "en",
  "skill_id": "621a5e10-12c3-4e96-a4cc-9f03cca9aa60",
  "workspace": {
    "actions": [
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_976",
            "output": {
              "generic": []
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "expression": "input.text"
                  },
                  "skill_variable": "query_text"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_976",
            "next_step": "step_622"
          },
          {
            "step": "step_622",
            "title": "Call queryLLM to search and pass into LLM",
            "handlers": [],
            "resolver": {
              "type": "callout",
              "callout": {
                "path": "/queryLLM",
                "type": "integration_interaction",
                "method": "POST",
                "internal": {
                  "spec_hash_id": "a7f456a1aefb1dbf7b77cbe17b93afbb28b41299c14622bd13cf4a16c7514feb",
                  "match_scenario": 10,
                  "catalog_item_id": "22f3a19e-b82c-4497-b272-774286c2068a"
                },
                "request_mapping": {
                  "body": [
                    {
                      "value": {
                        "skill_variable": "query_text"
                      },
                      "parameter": "question"
                    },
                    {
                      "value": {
                        "skill_variable": "es_index_name"
                      },
                      "parameter": "es_index_name"
                    },
                    {
                      "value": {
                        "expression": "{}"
                      },
                      "parameter": "filters"
                    },
                    {
                      "value": {
                        "expression": "[]"
                      },
                      "parameter": "llm_params.inputs"
                    },
                    {
                      "value": {
                        "skill_variable": "es_model_name"
                      },
                      "parameter": "es_model_name"
                    },
                    {
                      "value": {
                        "skill_variable": "llm_instructions"
                      },
                      "parameter": "llm_instructions"
                    },
                    {
                      "value": {
                        "skill_variable": "es_index_text_field"
                      },
                      "parameter": "es_index_text_field"
                    },
                    {
                      "value": {
                        "skill_variable": "es_model_text_field"
                      },
                      "parameter": "es_model_text_field"
                    }
                  ]
                },
                "result_variable": "step_622_result_1"
              }
            },
            "variable": "step_622",
            "next_step": "step_930"
          },
          {
            "step": "step_930",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": ""
                          },
                          {
                            "variable": "step_622_result_1",
                            "variable_path": "body.llm_response"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "variable": "step_622_result_1",
                    "variable_path": "body.llm_response"
                  },
                  "skill_variable": "model_response"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_930"
          }
        ],
        "title": "Query ES + LLM",
        "action": "action_24095",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "action_24095_intent_10919"
        },
        "variables": [
          {
            "title": "Call queryLLM to search and pass into LLM",
            "privacy": {
              "enabled": false
            },
            "variable": "step_622",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_622_result_1",
            "data_type": "any"
          },
          {
            "title": "{variable}",
            "privacy": {
              "enabled": false
            },
            "variable": "step_930",
            "data_type": "any"
          },
          {
            "title": "",
            "privacy": {
              "enabled": false
            },
            "variable": "step_976",
            "data_type": "any"
          }
        ],
        "launch_mode": "learning",
        "next_action": "action_24095-2",
        "topic_switch": {
          "allowed_from": true,
          "allowed_into": true,
          "never_return": false
        },
        "disambiguation_opt_out": false
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_976",
            "output": {
              "generic": []
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "expression": "input.text"
                  },
                  "skill_variable": "query_text"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_976",
            "next_step": "step_622"
          },
          {
            "step": "step_622",
            "title": "Call queryLLM to search and pass into LLM",
            "handlers": [],
            "resolver": {
              "type": "callout",
              "callout": {
                "path": "/queryWDLLM",
                "type": "integration_interaction",
                "method": "POST",
                "internal": {
                  "spec_hash_id": "77c55aad75a0eadfd724fe75a1f94f5c69dda182463b69874ff518980688b8e1",
                  "match_scenario": 10,
                  "catalog_item_id": "22f3a19e-b82c-4497-b272-774286c2068a"
                },
                "request_mapping": {
                  "body": [
                    {
                      "value": {
                        "skill_variable": "query_text"
                      },
                      "parameter": "question"
                    },
                    {
                      "value": {
                        "skill_variable": "wd_project_id"
                      },
                      "parameter": "project_id"
                    },
                    {
                      "value": {
                        "skill_variable": "wd_collection_id"
                      },
                      "parameter": "collection_id"
                    },
                    {
                      "value": {
                        "expression": "[]"
                      },
                      "parameter": "llm_params.inputs"
                    },
                    {
                      "value": {
                        "expression": "[]"
                      },
                      "parameter": "wd_document_names"
                    }
                  ]
                },
                "result_variable": "step_622_result_1"
              }
            },
            "variable": "step_622",
            "next_step": "step_930"
          },
          {
            "step": "step_930",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": ""
                          },
                          {
                            "variable": "step_622_result_1",
                            "variable_path": "body.llm_response"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_930"
          }
        ],
        "title": "Query WD + LLM",
        "action": "action_24095-2",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "action_24095_intent_10919-2"
        },
        "variables": [
          {
            "title": "Call queryLLM to search and pass into LLM",
            "privacy": {
              "enabled": false
            },
            "variable": "step_622",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_622_result_1",
            "data_type": "any"
          },
          {
            "title": "{variable}",
            "variable": "step_930",
            "data_type": "any"
          },
          {
            "title": "",
            "variable": "step_976",
            "data_type": "any"
          }
        ],
        "launch_mode": "learning",
        "next_action": "fallback",
        "topic_switch": {
          "allowed_from": true,
          "allowed_into": true,
          "never_return": false
        },
        "disambiguation_opt_out": false
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_558",
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action_and_end",
              "invoke_action": {
                "action": "action_24095",
                "policy": "default",
                "parameters": null,
                "result_variable": "step_558_result_1"
              }
            },
            "variable": "step_558",
            "next_step": "step_001"
          },
          {
            "step": "step_001",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "I'm afraid I don't understand. Please rephrase your question."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "end_action"
            },
            "variable": "step_001",
            "condition": {
              "lte": [
                {
                  "system_variable": "no_action_matches_count"
                },
                {
                  "scalar": 3
                }
              ]
            },
            "next_step": "step_002"
          },
          {
            "step": "step_002",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": ""
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action_and_end",
              "invoke_action": {
                "action": "fallback",
                "policy": "default",
                "parameters": null,
                "result_variable": "step_002_result_1"
              }
            },
            "variable": "step_002",
            "condition": {
              "gt": [
                {
                  "system_variable": "no_action_matches_count"
                },
                {
                  "scalar": 3
                }
              ]
            }
          }
        ],
        "title": "No action matches",
        "action": "anything_else",
        "boosts": [],
        "handlers": [],
        "condition": {
          "expression": "anything_else"
        },
        "variables": [
          {
            "title": "I am afraid I do not understand what you are asking, please re-p",
            "variable": "step_001",
            "data_type": "any"
          },
          {
            "variable": "step_002",
            "data_type": "any"
          },
          {
            "variable": "step_002_result_1",
            "data_type": "any"
          },
          {
            "title": "No response",
            "privacy": {
              "enabled": false
            },
            "variable": "step_558",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_558_result_1",
            "data_type": "any"
          }
        ],
        "disambiguation_opt_out": true
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "digression_failure",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "Sorry I couldn't confirm if you wanted to return to previous topic, let me connect to an agent."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "digression_failure",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Failed to confirm topic return"
                }
              ]
            },
            "next_step": "step_001"
          },
          {
            "step": "step_001",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "I'm afraid I don't understand. I can connect you to an agent."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_001",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Step validation failed"
                }
              ]
            },
            "next_step": "step_002"
          },
          {
            "step": "step_002",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "Sorry I couldn't assist you. I will connect you to an agent right away."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_002",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Agent requested"
                }
              ]
            },
            "next_step": "step_003"
          },
          {
            "step": "step_003",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "I am afraid I do not understand what you are asking, let me connect you to an agent."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_003",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "No action matches"
                }
              ]
            },
            "next_step": "step_004"
          },
          {
            "step": "step_004",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "It seems this conversation would be best managed by a human agent. Let me connect you to one of our agents."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_004",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Danger word detected"
                }
              ]
            },
            "next_step": "step_005"
          },
          {
            "step": "step_005",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "It seems this conversation would be best managed by a human agent. Let me connect you to one of our agents."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_005",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Profanity detected"
                }
              ]
            }
          }
        ],
        "title": "Fallback",
        "action": "fallback",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "fallback_connect_to_agent"
        },
        "variables": [
          {
            "title": "Topic return failed",
            "variable": "digression_failure",
            "data_type": "any"
          },
          {
            "title": "I'm afraid I don't understand. I can connect you to an agent.",
            "variable": "step_001",
            "data_type": "any"
          },
          {
            "title": "Sorry I couldn't assist you. I will connect you to an agent righ",
            "variable": "step_002",
            "data_type": "any"
          },
          {
            "title": "I am afraid I do not understand what you are asking, let me conn",
            "variable": "step_003",
            "data_type": "any"
          },
          {
            "title": "It seems this conversation would be best managed",
            "variable": "step_004",
            "data_type": "any"
          },
          {
            "title": "Profanity - It seems this conversation",
            "variable": "step_005",
            "data_type": "any"
          }
        ],
        "next_action": "run_always",
        "disambiguation_opt_out": true
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "danger_word_detected",
            "title": "Connect to agent",
            "handlers": [],
            "resolver": {
              "type": "fallback"
            },
            "variable": "danger_word_detected_variable",
            "condition": {
              "entity": "danger_words"
            },
            "next_step": "profanity_detected"
          },
          {
            "step": "profanity_detected",
            "title": "Show warning",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Please use appropriate language when interacting with the assistant."
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [
              {
                "type": "max_hits",
                "handler": "max_hits_handler",
                "resolver": {
                  "type": "fallback"
                }
              }
            ],
            "max_hits": 2,
            "resolver": {
              "type": "end_action"
            },
            "variable": "profanity_detected_variable",
            "condition": {
              "entity": "profane_words"
            }
          }
        ],
        "title": "Trigger word detected",
        "action": "run_always",
        "boosts": [],
        "handlers": [],
        "variables": [
          {
            "title": "Profanity detected",
            "variable": "danger_word_detected_variable",
            "data_type": "any"
          },
          {
            "title": "Profane word detected",
            "variable": "profanity_detected_variable",
            "data_type": "any"
          }
        ],
        "next_action": "anything_else"
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_001",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "Welcome, how can I assist you?"
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "end_action"
            },
            "variable": "step_001"
          }
        ],
        "title": "Greet customer",
        "action": "welcome",
        "boosts": [],
        "handlers": [],
        "condition": {
          "expression": "welcome"
        },
        "variables": [
          {
            "variable": "step_001",
            "data_type": "any"
          }
        ],
        "next_action": "action_24095",
        "disambiguation_opt_out": true
      }
    ],
    "intents": [
      {
        "intent": "action_24095_intent_10919",
        "examples": [
          {
            "text": "I have a question"
          }
        ]
      },
      {
        "intent": "action_24095_intent_10919-2",
        "examples": []
      },
      {
        "intent": "fallback_connect_to_agent",
        "examples": [
          {
            "text": "Agent help"
          },
          {
            "text": "Call agent"
          },
          {
            "text": "Can I connect to an agent?"
          },
          {
            "text": "I would like to speak to a human"
          },
          {
            "text": "I would like to speak to someone"
          }
        ],
        "description": "Please transfer me to an agent"
      }
    ],
    "entities": [
      {
        "entity": "danger_words",
        "values": [],
        "fuzzy_match": false
      },
      {
        "entity": "entity_17250",
        "values": [
          {
            "type": "patterns",
            "value": "Regular_expression",
            "patterns": [
              "\"^(?:.*[a-z])(?:.*[A-Z])(?:.*\\d)(?:.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$\""
            ]
          }
        ],
        "fuzzy_match": true
      },
      {
        "entity": "entity_25899",
        "values": [
          {
            "type": "patterns",
            "value": "Email",
            "patterns": [
              "\\b(?:[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[A-Za-z0-9-]*[A-Za-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\\b"
            ]
          }
        ],
        "fuzzy_match": true
      },
      {
        "entity": "profane_words",
        "values": [],
        "fuzzy_match": false
      },
      {
        "entity": "sys-currency",
        "values": []
      },
      {
        "entity": "sys-date",
        "values": []
      },
      {
        "entity": "sys-number",
        "values": []
      },
      {
        "entity": "sys-percentage",
        "values": []
      },
      {
        "entity": "sys-time",
        "values": []
      },
      {
        "entity": "sys-yes-no",
        "values": []
      }
    ],
    "metadata": {
      "api_version": {
        "major_version": "v2",
        "minor_version": "2018-11-08"
      }
    },
    "variables": [
      {
        "title": "es_index_name",
        "privacy": {
          "enabled": false
        },
        "variable": "es_index_name",
        "data_type": "string",
        "description": "Required: name of Elasticsearch index to search",
        "initial_value": {
          "scalar": "rag-llm-ingest-index"
        }
      },
      {
        "title": "es_index_text_field",
        "privacy": {
          "enabled": false
        },
        "variable": "es_index_text_field",
        "data_type": "string",
        "description": "Name for field in indexed document containing text to be returned",
        "initial_value": {
          "scalar": "body_content_field"
        }
      },
      {
        "title": "es_model_name",
        "privacy": {
          "enabled": false
        },
        "variable": "es_model_name",
        "data_type": "string",
        "description": "",
        "initial_value": {
          "scalar": ".elser_model_2_linux-x86_64"
        }
      },
      {
        "title": "es_model_text_field",
        "privacy": {
          "enabled": false
        },
        "variable": "es_model_text_field",
        "data_type": "string",
        "description": "Name of field in index containing embeddings",
        "initial_value": {
          "scalar": "ml.tokens"
        }
      },
      {
        "title": "llm_instructions",
        "privacy": {
          "enabled": false
        },
        "variable": "llm_instructions",
        "data_type": "string",
        "description": "Prompt to send in to api call for LLM",
        "initial_value": {
          "scalar": "[INST]<<SYS>>You are a helpful, respectful, and honest assistant. Always answer as helpfully as possible, while being safe. Be brief in your answers. Your answers should not include any harmful, unethical, racist, sexist, toxic, dangerous, or illegal content. Please ensure that your responses are socially unbiased and positive in nature.\\nIf a question does not make any sense, or is not factually coherent, explain why instead of answering something not correct. If you don\\\\'\\''t know the answer to a question, please do not share false information. <</SYS>>\\nGenerate the next agent response by answering the question. You are provided several documents with titles. If the answer comes from different documents please mention all possibilities and use the tiles of documents to separate between topics or domains. Answer with no more than 150 words. If you cannot base your answer on the given document, please state that you do not have an answer.\\n{context_str}<</SYS>>\\n\\n{query_str} Answer with no more than 150 words. If you cannot base your answer on the given document, please state that you do not have an answer. [/INST]"
        }
      },
      {
        "title": "model_id",
        "variable": "model_id",
        "data_type": "string",
        "description": "The ID of the model to be used for this user prompt. Please refer to the list of models at https://bam.res.ibm.com/docs/models",
        "initial_value": {
          "scalar": "meta-llama/llama-2-13b-chat"
        }
      },
      {
        "title": "model_input",
        "privacy": {
          "enabled": false
        },
        "variable": "model_input",
        "data_type": "string",
        "description": "Additional input to the watsonx model"
      },
      {
        "title": "model_parameters_max_new_tokens",
        "variable": "model_parameters_max_new_tokens",
        "data_type": "number",
        "description": "The maximum number of new tokens to be generated.",
        "initial_value": {
          "scalar": 300
        }
      },
      {
        "title": "model_parameters_min_new_tokens",
        "variable": "model_parameters_min_new_tokens",
        "data_type": "number",
        "description": "The minimum number of new tokens to be generated.",
        "initial_value": {
          "scalar": 1
        }
      },
      {
        "title": "model_parameters_repetition_penalty",
        "variable": "model_parameters_repetition_penalty",
        "data_type": "number",
        "description": "",
        "initial_value": {
          "scalar": 1
        }
      },
      {
        "title": "model_parameters_stop_sequences",
        "variable": "model_parameters_stop_sequences",
        "data_type": "any",
        "description": "",
        "initial_value": {
          "expression": "[ \"\\n\\n\"]"
        }
      },
      {
        "title": "model_parameters_temperature",
        "privacy": {
          "enabled": false
        },
        "variable": "model_parameters_temperature",
        "data_type": "number",
        "description": "he value used to control the next token probabilities. The range is from 0.05 to 1.00; 0.05 makes it mostly deterministic.",
        "initial_value": {
          "scalar": 0.7
        }
      },
      {
        "title": "model_response",
        "variable": "model_response",
        "data_type": "string",
        "description": "The text generated by the model in response to the model input"
      },
      {
        "title": "num_results",
        "privacy": {
          "enabled": false
        },
        "variable": "num_results",
        "data_type": "number",
        "description": "Number of documents to return from Elasticsearch",
        "initial_value": {
          "scalar": 5
        }
      },
      {
        "title": "query_text",
        "privacy": {
          "enabled": false
        },
        "variable": "query_text",
        "data_type": "string",
        "description": ""
      },
      {
        "title": "wd_collection_id",
        "privacy": {
          "enabled": false
        },
        "variable": "wd_collection_id",
        "data_type": "string",
        "description": "Optional: ID for the Watson Discovery Collection within the project"
      },
      {
        "title": "wd_document_names",
        "privacy": {
          "enabled": false
        },
        "variable": "wd_document_names",
        "data_type": "any",
        "description": "Optional: array with list of documents to search in Watson Discovery project and collection, example [\"acme.pdf\", \"test.docx\"]"
      },
      {
        "title": "wd_project_id",
        "privacy": {
          "enabled": false
        },
        "variable": "wd_project_id",
        "data_type": "string",
        "description": "Required: Value to the project ID of the Watson Discovery project containing your data",
        "initial_value": {
          "scalar": "1fef694b-86ea-4260-8440-bc29989de92e"
        }
      },
      {
        "title": "wd_return_params",
        "privacy": {
          "enabled": false
        },
        "variable": "wd_return_params",
        "data_type": "any",
        "description": "Fields to pull from Watson Discovery",
        "initial_value": {
          "scalar": "[\"Title\", \"Text\"]"
        }
      },
      {
        "title": "wd_version",
        "privacy": {
          "enabled": false
        },
        "variable": "wd_version",
        "data_type": "string",
        "description": "Watson Discovery URL Version",
        "initial_value": {
          "scalar": "2020-08-30"
        }
      }
    ],
    "data_types": [],
    "collections": [],
    "counterexamples": [],
    "system_settings": {
      "variable": {
        "format": {
          "time": {
            "pattern": "short"
          },
          "currency": {
            "fraction_digits": 2
          }
        }
      },
      "off_topic": {
        "enabled": true
      },
      "topic_switch": {
        "enabled": true,
        "messages": {
          "enable_confirmation": true,
          "confirmation_failure": {
            "generic": [
              {
                "values": [
                  {
                    "text_expression": {
                      "concat": [
                        {
                          "scalar": "I'm sorry, I did not catch that, please confirm."
                        }
                      ]
                    }
                  }
                ],
                "response_type": "text",
                "selection_policy": "sequential"
              }
            ]
          },
          "confirmation_request": {
            "generic": [
              {
                "values": [
                  {
                    "text_expression": {
                      "concat": [
                        {
                          "scalar": "Do you want to continue with the previous topic: "
                        },
                        {
                          "system_variable": "digressed_from"
                        },
                        {
                          "scalar": "?"
                        }
                      ]
                    }
                  }
                ],
                "response_type": "text",
                "selection_policy": "sequential"
              },
              {
                "options": [
                  {
                    "label": "Yes",
                    "value": {
                      "input": {
                        "text": "Yes"
                      }
                    }
                  },
                  {
                    "label": "No",
                    "value": {
                      "input": {
                        "text": "No"
                      }
                    }
                  }
                ],
                "response_type": "option",
                "repeat_on_reprompt": true
              }
            ]
          }
        },
        "max_tries": 3
      },
      "disambiguation": {
        "prompt": "Did you mean:",
        "enabled": true,
        "randomize": true,
        "max_suggestions": 5,
        "suggestion_text_policy": "title",
        "none_of_the_above_prompt": "None of the above",
        "use_connect_to_support_prompt": "connect to support",
        "single_answer_clarification_prompt": "Something else"
      },
      "spelling_auto_correct": true
    },
    "learning_opt_out": true
  },
  "description": "created for assistant 1c76effb-2430-4334-8897-6cdad3c6282b",
  "assistant_id": "adfb1780-6eb6-4306-bca8-b72a4c5252d7",
  "workspace_id": "621a5e10-12c3-4e96-a4cc-9f03cca9aa60",
  "dialog_settings": {},
  "next_snapshot_version": "1",
  "environment_id": "2f26a894-dcda-44bc-a51f-638b641683dd"
}